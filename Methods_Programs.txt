List Methods:
=========================================================================================================
===========================================================================================================
Adding and Appending

append(): Used for appending and adding elements to List.
It is used to add elements to the last position of List.

Syntax: 
 list.append (element)
 
 # Adds List Element as value of List.
List = ['Mathematics', 'chemistry', 1997, 2000]
List.append(20544)
print(List)


Output:

['Mathematics', 'chemistry', 1997, 2000, 20544]



insert(): Inserts an elements at specified position.
Syntax:
 list.insert(<position, element)
 
 
 Note: Position mentioned should be within the range of List, 
 as in this case between 0 and 4, elsewise would throw IndexError.
 
 
 List = ['Mathematics', 'chemistry', 1997, 2000]
# Insert at index 2 value 10087
List.insert(2,10087)	
print(List)		


Output:

['Mathematics', 'chemistry', 10087, 1997, 2000, 20544]



extend(): Adds contents to List2 to the end of List1.
Syntax:
List1.extend(List2)


List1 = [1, 2, 3]
List2 = [2, 3, 4, 5]

# Add List2 to List1
List1.extend(List2)		
print(List1)

# Add List1 to List2 now
List2.extend(List1)
print(List2)



Output:

[1, 2, 3, 2, 3, 4, 5]
[2, 3, 4, 5, 1, 2, 3, 2, 3, 4, 5]


sum(), count(), index(), min() and max() functions of List

sum() : Calculates sum of all the elements of List.
Syntax:
 sum(List)
 
List = [1, 2, 3, 4, 5]
print(sum(List))


Output:

15

What happens if numeric value is not used a parameter?
Sum is calculated only for Numeric values, elsewise throws TypeError.

List = ['gfg', 'abc', 3]
print(sum(List))

 Output:

Traceback (most recent call last):
  File "", line 1, in 
    sum(List)
TypeError: unsupported operand type(s) for +: 'int' and 'str'


count():Calculates total occurrence of given element of List.
Syntax:
List.count(element)



List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1]
print(List.count(1))


Output:

4



length:Calculates total length of List.
Syntax:
len(list_name)


List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1]
print(len(List))


Output:

10


index(): Returns the index of first occurrence. Start and End index are not necessary parameters.
Syntax:
List.index(element[,start[,end]])


List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1]
print(List.index(2))


Output:

1


Another example:

List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1]
print(List.index(2,2))

Output:

4


List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1]

"""index(element, start, end) : It will calculate till index end-1. """

# will check from index 2 to 4.
print("After checking in index range 2 to 4")
print(List.index(2,2,5))

# will check from index 2 to 3.
print("After checking in index range 2 to 3")
print(List.index(2,2,4))
	
Output:

After checking in index range 2 to 4
4
After checking in index range 2 to 3
Traceback (most recent call last):
  File "", line 1, in 
    List.index(2,2,4)
ValueError: tuple.index(x): x not in tuple



min() : Calculates minimum of all the elements of List.
Syntax:
min(List)


List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]
print(min(List))

Output:

1.054


max(): Calculates maximum of all the elements of List.
Syntax:
max(List)


List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]
print(max(List))


Output:

5.33

sort() and reverse() functions

reverse(): Sort the given data structure (both tuple and list) in ascending order. 
Key and reverse_flag are not necessary parameter and reverse_flag is set to False, if nothing is passed through sorted().
Syntax:
sorted([list[,key[,Reverse_Flag]]])
 list.sort([key,[Reverse_flag]])
 
List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]

#Reverse flag is set True
List.sort(reverse=True)

#List.sort().reverse(), reverses the sorted list
print(List)		

Output:

[5.33, 4.445, 3, 2.5, 2.3, 1.054]

List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]
sorted(List)
print(List)

Output:

[1.054, 2.3, 2.5, 3, 4.445, 5.33]


Deletion of List Elements

To Delete one or more elements, i.e. remove an element, 
many built in functions can be used, such as pop() & remove() and keywords such as del.

pop(): Index is not a necessary parameter, if not mentioned takes the last index.
Syntax:
 list.pop([index])
 
Note: Index must be in range of the List, elsewise IndexErrors occurs.

List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]
print(List.pop())

Output:

2.5



List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]
print(List.pop(0))


Output:

2.3


del() : Element to be deleted is mentioned using list name and index.
Syntax:
del list.[index]


List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]
del List[0]
print(List)


Output:

[4.445, 3, 5.33, 1.054, 2.5]



remove(): Element to be deleted is mentioned using list name and element.
Syntax:
 list.remove(element)
 
 
List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]
List.remove(3)
print(List)


Output:

[2.3, 4.445, 5.33, 1.054, 2.5]




======================================================================================================================================
Tuple Methods:
========================================================================================================================================

Python Tuples is an immutable collection of that are more like lists. 
Python Provides a couple of methods to work with tuples. 
In this article, we will discuss these two methods in detail with the help of some examples.

Count() Method
The count() method of Tuple returns the number of times the given element appears in the tuple.

Syntax:

tuple.count(element)

Using the Tuple count() method

# Creating tuples
Tuple1 = (0, 1, 2, 3, 2, 3, 1, 3, 2)
Tuple2 = ('python', 'geek', 'python',
		'for', 'java', 'python')

# count the appearance of 3
res = Tuple1.count(3)
print('Count of 3 in Tuple1 is:', res)

# count the appearance of python
res = Tuple2.count('python')
print('Count of Python in Tuple2 is:', res)


Output:

Count of 3 in Tuple1 is: 3
Count of Python in Tuple2 is: 3



Counting tuples and lists as elements in Tuples


Output:

Count of (2, 3) in Tuple is: 2
Count of [3, 2] in Tuple is: 1


Index() Method
The Index() method returns the first occurrence of the given element from the tuple.

Syntax:

tuple.index(element, start, end)

Parameters:

element: The element to be searched.
start (Optional): The starting index from where the searching is started
end (Optional): The ending index till where the searching is done
Note: This method raises a ValueError if the element is not found in the tuple.

Using Tuple Index() Method


# Creating tuples
Tuple = (0, 1, 2, 3, 2, 3, 1, 3, 2)

# getting the index of 3
res = Tuple.index(3)
print('First occurrence of 3 is', res)

# getting the index of 3 after 4th
# index
res = Tuple.index(3, 4)
print('First occurrence of 3 after 4th index is:', res)


Output:

First occurrence of 3 is 3
First occurrence of 3 after 4th index is: 5


Using Tuple() method when the element is not found


# Creating tuples
Tuple = (0, 1, 2, 3, 2, 3, 1, 3, 2)

# getting the index of 3
res = Tuple.index(4)

Output:

ValueError: tuple.index(x): x not in tuple



==========================================================================================================================================
Set Methods:
===========================================================================================================================================

A Set in Python is a collection of unique elements which are unordered and mutable. 
Python provides various functions to work with Set. 
In this article, we will see a list of all the functions provided by Python to deal with Sets.


Adding and Removing elements
We can add and remove elements form the set with the help of the below functions

add(): Adds a given element to a set
clear(): Removes all elements from the set
discard(): Removes the element from the set
pop(): Returns and removes a random element from the set
remove(): Removes the element from the set


# set of letters
s = {'g', 'e', 'k', 's'}

# adding 's'
s.add('f')
print('Set after updating:', s)

# Discarding element from the set
s.discard('g')
print('\nSet after updating:', s)

# Removing element from the set
s.remove('e')
print('\nSet after updating:', s)

# Popping elements from the set
print('\nPopped element', s.pop())
print('Set after updating:', s)

s.clear()
print('\nSet after updating:', s)



Output
Set after updating: {'g', 'k', 's', 'e', 'f'}

Set after updating: {'k', 's', 'e', 'f'}

Set after updating: {'k', 's', 'f'}

Popped element k
Set after updating: {'s', 'f'}

Set after updating: set()



set add() in python


# set of letters
GEEK = {'g', 'e', 'k'}

# adding 's'
GEEK.add('s')
print('Letters are:', GEEK)

# adding 's' again
GEEK.add('s')
print('Letters are:', GEEK)


Output:

('Letters are:', set(['k', 'e', 's', 'g']))
('Letters are:', set(['k', 'e', 's', 'g'])

# set of letters
GEEK = {6, 0, 4}

# adding 1
GEEK.add(1)
print('Letters are:', GEEK)

# adding 0
GEEK.add(0)
print('Letters are:', GEEK)


Output:

('Letters are:', set([0, 1, 4, 6]))
('Letters are:', set([0, 1, 4, 6]))



set clear() in python

he clear() method removes all elements from the set.

Syntax:

set.clear()
parameters:
The clear() method doesn't take any parameters.
Return:
The clear() method doesn't return any value.


# set of letters
GEEK = {'g', 'e', 'e', 'k', 's'}
print('GEEK before clear:', GEEK)

# clearing vowels
GEEK.clear()
print('GEEK after clear:', GEEK)


Output:

GEEK before clear: set(['s', 'e', 'k', 'g'])
GEEK after clear: set([])


# set of letters
GEEK = {6, 0, 4, 1}
print('GEEK before clear:', GEEK)

# clearing vowels
GEEK.clear()
print('GEEK after clear:', GEEK)

Output:

GEEK before clear: set([0, 1, 4, 6])
GEEK after clear: set([])


set copy() in python

Parameters:The copy() method for sets doesn’t take any parameters.

Return value:The function returns a shallow copy of the original set.

Syntax:

set_name.copy()


# Python3 program to demonstrate the use
# of join() function

set1 = {1, 2, 3, 4}

# function to copy the set
set2 = set1.copy()

# prints the copied set
print(set2)	


Output:

{1, 2, 3, 4}


Shallow Copy Example :


# Python program to demonstrate that copy
# created using set copy is shallow
first = {'g', 'e', 'e', 'k', 's'}
second = first.copy()

# before adding
print 'before adding: '
print 'first: ',first
print 'second: ', second

# Adding element to second, first does not
# change.
second.add('f')

# after adding
print 'after adding: '
print 'first: ', first
print 'second: ', second



Output:

before adding: 
first:  set(['s', 'e', 'k', 'g'])
second:  set(['s', 'e', 'k', 'g'])
after adding: 
first:  set(['s', 'e', 'k', 'g'])
second:  set(['s', 'e', 'k', 'g', 'f'])


Python Set | difference()


The difference between the two sets in Python is equal to the difference between the number of elements in two sets. 
The function difference() returns a set that is the difference between two sets. 
Let’s try to find out what will be the difference between two sets A and B. 
Then (set A – set B) will be the elements present in set A but not in B and (set B – set A) will be the elements present in set B but not in set A.

Syntax:

set_A.difference(set_B) for (A - B)
set _B.difference(set_A) for (B - A)



# Python code to get the difference between two sets
# using difference() between set A and set B

# Driver Code
A = {10, 20, 30, 40, 80}
B = {100, 30, 80, 40, 60}
print (A.difference(B))
print (B.difference(A))


Output:
{10, 20}
{100, 60}


We can also use – operator to find the difference between two sets.


# Python code to get the difference between two sets
# using difference() between set A and set B

# Driver Code
A = {10, 20, 30, 40, 80}
B = {100, 30, 80, 40, 60}
print (A - B)
print (B - A)


Output:
{10, 20}
{100, 60}


If we have equal sets then it will return the null set.


# Python code to get the difference between two sets
# using difference() between set A and set B

# Driver Code
A = {10, 20, 30, 40, 80}
B = {10, 20, 30, 40, 80, 100}
print (A - B)


Output:
set()


Python Set | difference_update()


The difference_update() method helps in an in-place way of differentiating the set. 
The previously discussed set difference() helps to find out the difference between two sets and returns a new set with the difference value, 
but the difference_update() updates the existing caller set.
If A and B are two sets. The set difference() method will get the (A – B) and will return a new set. 
The set difference_update() method modifies the existing set. 
If (A – B) is performed, then A gets modified into (A – B), and if (B – A) is performed, then B gets modified into (B – A).

Syntax: 
 
A.difference_update(B) for (A - B)
B.difference_update(A) for (B - A)


# Python code to get the difference between two sets
# using difference_update() between set A and set B

# Driver Code
A = {10, 20, 30, 40, 80}
B = {100, 30, 80, 40, 60}

# Modifies A and returns None
A.difference_update(B)

# Prints the modified set
print (A)


Output: 

{20, 10}


frozenset() in Python

The frozenset() is an inbuilt function in Python which takes an iterable object as input and makes them immutable. 
Simply it freezes the iterable objects and makes them unchangeable.

In Python, frozenset is the same as set except the frozensets are immutable which means that elements from the frozenset cannot be added or removed once created. 
This function takes input as any iterable object and converts them into an immutable object. 
The order of elements is not guaranteed to be preserved.

Syntax : frozenset(iterable_object_name)
Parameter : This function accepts iterable object as input parameter.
Return Type: This function return an equivalent frozenset object.


If no parameters are passed to frozenset() function then it returns a empty frozenset type object. 

# Python program to understand frozenset() function

# tuple of numbers
nu = (1, 2, 3, 4, 5, 6, 7, 8, 9)

# converting tuple to frozenset
fnum = frozenset(nu)

# printing details
print("frozenset Object is : ", fnum)


Output: 
frozenset Object is :  frozenset({1, 2, 3, 4, 5, 6, 7, 8, 9})


Since frozenset object are immutable they are mainly used as key in dictionary or elements of other sets. 
Below example explains it clearly. 

# Python program to understand use
# of frozenset function

# creating a dictionary
Student = {"name": "Ankit", "age": 21, "sex": "Male",
		"college": "MNNIT Allahabad", "address": "Allahabad"}

# making keys of dictionary as frozenset
key = frozenset(Student)

# printing keys details
print('The frozen set is:', key)


Output: 
The frozen set is: frozenset({'sex', 'age', 'address', 'name', 'college'})


Intersection() function Python

Python intersection() function return a new set with an element that is common to all set

The intersection of two given sets is the largest set which contains all the elements that are common to both sets. 
The intersection of two given sets A and B is a set which consists of all the elements which are common to both A and B.


Python intersection() Syntax:
set1.intersection(set2, set3, set4….) 
In parameters, any number of sets can be given

Python intersection() Return value:
The intersection() function returns a set, which has the intersection of all sets(set1, set2, set3…) with set1. 
It returns a copy of set1 only if no parameter is passed. 


# Python3 program for intersection() function
set1 = {2, 4, 5, 6}
set2 = {4, 6, 7, 8}
set3 = {4, 6, 8}

# union of two sets
print("set1 intersection set2 : ",
	set1.intersection(set2))

# union of three sets
print("set1 intersection set2 intersection set3 :",
	set1.intersection(set2, set3))


Output: 

set1 intersection set2 :  {4, 6}
set1 intersection set2 intersection set3 : {4, 6}


we can also get intersection using & operator.


# Python3 program for intersection() function
set1 = {2, 4, 5, 6}
set2 = {4, 6, 7, 8}
set3 = {1, 0, 12}

print(set1 & set2)
print(set1 & set3)

print(set1 & set2 & set3)


Output:

{4, 6}
set()
set()



Python set intersection opposite
symmetric_difference() is a opposite to the set.intersection() methods.

# Python3 program for intersection() function
set1 = {2, 4, 5, 6}
set2 = {4, 6, 7, 8}
set3 = {1, 0, 12}

print(set1.symmetric_difference(set2))
print(set1.symmetric_difference(set3))
print(set2.symmetric_difference(set3))


Output:

{2, 5, 7, 8}
{0, 1, 2, 4, 5, 6, 12}
{0, 1, 4, 6, 7, 8, 12}


isdisjoint() function in Python


Python set isdisjoint() function check whether the two sets are disjoint or not, if it is disjoint then it returns True otherwise it will return False. 
Two sets are said to be disjoint when their intersection is null. 
In simple words, they do not have any common element in between them


Examples: 

Let set A = {2, 4, 5, 6}
and set B = {7, 8, 9, 10} 
Set A and set B are said to be disjoint sets as their intersection is null. 
They do not have any common elements in between them. 

Python isdisjoint()  Syntax
set1.isdisjoint(set2)


python isdisjoint() Parameters
The isdisjoint() Python method takes only a single argument. 
It can also take an iterable (list, tuple, dictionary, and string) to disjoint(). 
The isdisjoint() method will automatically convert iterables to set and checks whether the sets are disjoint or not.

Python isdisjoint() Return Value
returns Trueif the two sets are disjoint. 
returns Falseif the twos sets are not disjoint.

Working set isdisjoin()


# Python3 program for isdisjoint() function
set1 = {2, 4, 5, 6}
set2 = {7, 8, 9, 10}
set3 = {1, 2}

# checking of disjoint of two sets
print("set1 and set2 are disjoint?",
	set1.isdisjoint(set2))

print("set1 and set3 are disjoint?",
	set1.isdisjoint(set3))

Output: 

set1 and set2 are disjoint? True
set1 and set3 are disjoint? False


Python isdisjoint() with Other Iterables as arguments

# Set
A = {2, 4, 5, 6}

# List
lis = [1, 2, 3, 4, 5]

# Dictionary dict, Set is formed on Keys
dict = {1: 'Apple', 2: 'Orage'}

# Dictionary dict2
dict2 = {'Apple': 1, 'Orage': 2}

print("Set A and List lis disjoint?", A.isdisjoint(lis))
print("Set A and dict are disjoint?", A.isdisjoint(dict))
print("Set A and dict2 are disjoint?", A.isdisjoint(dict2))


Output:

Set A and List lis disjoint? False
Set A and dict are disjoint? False
Set A and dict2 are disjoint? True


issubset() in python


Python set issubset() method returns True if all elements of a set A are present in another set B which is passed 
as an argument and returns false if all elements not present.

Python set issubset() Syntax:
A.issubset(B)
checks whether A is a subset of B or not.
Python set isubset() Return:
returns true if A is a subset of B otherwise false.

# Python program to demonstrate working of
# issubset().

A = {4, 1, 3, 5}
B = {6, 0, 4, 1, 5, 0, 3, 5}

# Returns True
print(A.issubset(B))

# Returns False
# B is not subset of A
print(B.issubset(A))


Output: 

True
False


Working with three-set using issubset()

# Another Python program to demonstrate working
# of issubset().
A = {1, 2, 3}
B = {1, 2, 3, 4, 5}
C = {1, 2, 4, 5}

# Returns True
print(A.issubset(B))

# Returns False
# B is not subset of A
print(B.issubset(A))

# Returns False
print(A.issubset(C))

# Returns True
print(C.issubset(B))


Output: 

True
False
False
True



issuperset() in Python

Difficulty Level : Easy
Last Updated : 05 Oct, 2021
Python set issuperset() method returns True if all elements of a set A occupies set B which is passed 
as an argument and returns false if all elements of B are not present in A. 
This means if A is a superset of B then it returns true; else False

Python issuperset() Syntax: 
A.issuperset(B)
checks whether A is a superset of B or not.
Python issuperset() Returns:
True if A is a superset of B; otherwise false.


Working of issubset() with two sets

# Python program to demonstrate working of
# issuperset().

A = {4, 1, 3, 5}
B = {6, 0, 4, 1, 5, 0, 3, 5}

print("A.issuperset(B) : ", A.issuperset(B))

# B is superset of A
print("B.issuperset(A) : ", B.issuperset(A))


Output: 

A.issuperset(B) :  False
B.issuperset(A) :  True

Working of issubset() with three sets

# Python program to demonstrate working
# of issuperset().

A = {1, 2, 3}
B = {1, 2, 3, 4, 5}
C = {1, 2, 4, 5}

print("A.issuperset(B) : ", A.issuperset(B))
print("B.issuperset(A) : ", B.issuperset(A))
print("A.issuperset(C) : ", A.issuperset(C))
print("C.issuperset(B) : ", C.issuperset(B))

Output: 

A.issuperset(B) :  False
B.issuperset(A) :  True
A.issuperset(C) :  False
C.issuperset(B) :  False


Python Set | pop()

This in-built function of Python helps to pop out elements from a set just like the principle used in the concept while implementing Stack. This method removes a top element from the set but not the random element and returns the removed element. 

We can verify this by printing the set before using the pop() method.

Syntax: 

# Pops a First element from S
# and returns it.
S.pop()


# Python code to illustrate pop() method

S = {"ram", "rahim", "ajay", "rishav", "aakash"}

# Print the set before using pop() method
# First element after printing the set will be popped out
print(S)

# Popping three elements and printing them
print(S.pop())
print(S.pop())
print(S.pop())

# The updated set
print("Updated set is", S)


Output: 

rishav
ram
rahim
Updated set is {'aakash', 'ajay'}


Python Set symmetric_difference()

The symmetric difference of two sets set1 and set2 is the set of elements which are in either of the sets set1 or set2 but not in both.

Syntax :

set1_name.symmetric_difference(set2_name) 


Parameters :
It only takes a single set as the parameter. If a list, tuple or dictionary is passed it converts it a set and performs the task.

Return value :

Returns a set which is the symmetric difference between the two sets. 


# Python program to demonstrate the use of
# of symmetric_difference() method


list1 = [1, 2, 3]
list2 = [2, 3, 4]
list3 = [3, 4, 5]

# Convert list to sets
set1 = set(list1)
set2 = set(list2)

# Prints the symmetric difference when
# set is passed as a parameter
print(set1.symmetric_difference(set2))

# Prints the symmetric difference when list is
# passed as a parameter by converting it to a set
print(set2.symmetric_difference(list3))


Output :

{1, 4}
{2, 5}



Python set symmetric_difference_update()

The symmetric difference of two sets is the set of elements which are in either of the sets but not in both of them.

Syntax: 
A.symmetric_difference_update(B) 
Parameters: 
The symmetric_difference takes a single “iterable” as an argument. Iterable should contain hashable object.
Returns: 
This method returns None (which indicates absence of a return value). 
It only updates the set calling symmetric_difference_update() with the symmetric difference of sets.


# Python code to demonstrate working of
# symmetric_difference_update()

A = {'p', 'a', 'w', 'a', 'n'}
B = {'r', 'a', 'o', 'n', 'e'}

# result is always none.
result = A.symmetric_difference_update(B)

print('A = ', A)
print('B = ', B)
print('result = ', result)


Output: 
 

('A = ', set(['e', 'o', 'p', 'r', 'w']))
('B = ', set(['a', 'r', 'e', 'o', 'n']))
('result = ', None)


# Python code to demonstrate working of
# symmetric_difference_update()

A = {'s', 'u', 'n', 'n', 'y'}
B = {'b', 'u', 'n', 'n', 'y'}

# result is always none.
result = A.symmetric_difference_update(B)

print('A = ', A)
print('B = ', B)
print('result = ', result)

Output: 
 

('A = ', set(['s', 'b']))
('B = ', set(['y', 'b', 'u', 'n']))
('result = ', None)


Union() function in Python

Python set Union() function returns a new set which contains all the items from the original set.

Union of two given sets is the smallest set which contains all the elements of both the sets. 
Union of two given sets A and B is a set which consists of all the elements of A and all the elements of B such that no element is repeated.

Python set Union() Syntax:
set1.union(set2, set3, set4….) 

In parameters, any number of sets can be given

 Python set Union() Return value:
The union() function returns a set, which has the union of all sets(set1, set2, set3…) with set1. 
It returns a copy of set1 only if no parameter is passed. 

# Python3 program for union() function

set1 = {2, 4, 5, 6}
set2 = {4, 6, 7, 8}
set3 = {7, 8, 9, 10}

# union of two sets
print("set1 U set2 : ", set1.union(set2))

# union of three sets
print("set1 U set2 U set3 :", set1.union(set2, set3))


Output: 

set1 U set2 :  {2, 4, 5, 6, 7, 8}
set1 U set2 U set3 : {2, 4, 5, 6, 7, 8, 9, 10}

We can use “|” operator to find the union of the sets.

# Python3 program for union with | operator

set1 = {2, 4, 5, 6}
set2 = {4, 6, 7, 8}
set3 = {7, 8, 9, 10}

# union of two sets
print("set1 U set2 : ", set1 | set2)

# union of three sets
print("set1 U set2 U set3 :", set1 |set2 | set3)

Output:

set1 U set2 :  {2, 4, 5, 6, 7, 8}
set1 U set2 U set3 : {2, 4, 5, 6, 7, 8, 9, 10}


Python Set | update()


Python update() function in set adds elements from a set (passed as an argument) to the set. 

Syntax :  set1.update(set2) 

Here set1 is the set in which set2 will be added.

Parameters : Update() method takes only a single argument. 
The single argument can be a set, list, tuples or a dictionary. 
It automatically converts into a set and adds to the set. 

Return value : This method adds set2 to set1 and returns nothing. 


# Python program to demonstrate the
# use of update() method

list1 = [1, 2, 3]
list2 = [5, 6, 7]
list3 = [10, 11, 12]

# Lists converted to sets
set1 = set(list2)
set2 = set(list1)

# Update method
set1.update(set2)

# Print the updated set
print(set1)

# List is passed as an parameter which
# gets automatically converted to a set
set1.update(list3)
print(set1)


Output : 

{1, 2, 3, 5, 6, 7}
{1, 2, 3, 5, 6, 7, 10, 11, 12}



Python set update element in set

# Python program to demonstrate the
# use of update() method

list1 = [1, 2, 3, 4]
list2 = [1, 4, 2, 3, 5]
alphabet_set = {'a', 'b', 'c'}

# lists converted to sets
set1 = set(list2)
set2 = set(list1)

# Update method
set1.update(set2)

# Print the updated set
print(set1)

set1.update(alphabet_set)
print(set1)

Output : 

{1, 2, 3, 4, 5}
{1, 2, 3, 4, 5, 'c', 'b', 'a'}



============================================================================================================================================================
Python Dictionary Methods:
=============================================================================================================================================================

Python Dictionary is like a map that is used to store data in the form of a key:value pair. 
Python provides various in-built functions to deal with dictionaries. 
In this article, we will see a list of all the functions provided by the Python to work with dictionaries.

Below functions can be used to access dictionary items (both key and value).

get(): This function returns the value for the given key
keys(): This function returns a view object that displays a list of all the keys in the dictionary in order of insertion
values(): This function returns a list of all the values available in a given dictionary
items(): This function returns the list with all dictionary keys with values
Example: Accessing Dictionary Items.


# Python program to demonstrate working
# of dictionary copy
dic = {1:'geeks', 2:'for', 3:'geeks'}
print('original: ', dic)

# Accessing value for key
print(dic.get(1))

# Accessing keys for the dictionary
print(dic.keys())

# Accessing keys for the dictionary
print(dic.values())

# Printing all the items of the Dictionary
print(dic.items())


Output
original:  {1: 'geeks', 2: 'for', 3: 'geeks'}
geeks
dict_keys([1, 2, 3])
dict_values(['geeks', 'for', 'geeks'])
dict_items([(1, 'geeks'), (2, 'for'), (3, 'geeks')])


Python Dictionary clear()
The clear() method removes all items from the dictionary.

Syntax:

dict.clear()
Parameters:

The clear() method doesn't take any parameters.
Returns:

The clear() method doesn't return any value.


# Python program to demonstrate working of
# dictionary clear()
text = {1: "geeks", 2: "for"}

text.clear()
print('text =', text)


Output:

text = {}



# Python code to demonstrate difference
# clear and {}.

text1 = {1: "geeks", 2: "for"}
text2 = text1

# Using clear makes both text1 and text2
# empty.
text1.clear()

print('After removing items using clear()')
print('text1 =', text1)
print('text2 =', text2)

text1 = {1: "one", 2: "two"}
text2 = text1

# This makes only text1 empty.
text1 = {}

print('After removing items by assigning {}')
print('text1 =', text1)
print('text2 =', text2)


Output:

After removing items using clear()
text1 = {}
text2 = {}
After removing items by assigning {}
text1 = {}
text2 = {1: 'one', 2: 'two'}


Python Dictionary copy()

Python Dictionary copy() method returns a shallow copy of the dictionary.

Python Dictionary copy() Syntax: 
dict.copy()

Python Dictionary copy() Parameters: 
The copy() method doesn’t take any parameters.

Python Dictionary copy() Returns: 
This method doesn’t modify the original, dictionary just returns copy of the dictionary.


# Python program to demonstrate working
# of dictionary copy
original = {1: 'geeks', 2: 'for'}

# copying using copy() function
new = original.copy()

# removing all elements from the list
# Only new list becomes empty as copy()
# does shallow copy.
new.clear()

print('new: ', new)
print('original: ', original)



Output: 

new:  {}
original:  {1: 'geeks', 2: 'for'}


Python Dictionary copy() and update


# given dictionary
dict1 = {10: 'a', 20: [1, 2, 3], 30: 'c'}
print("Given Dictionary:", dict1)

# new dictionary and
# copying using copy() method
dict2 = dict1.copy()
print("New copy:", dict2)

# Updating dict2 elements and
# checking the change in dict1
dict2[10] = 10
dict2[20][2] = '45' # list item updated

print("Updated copy:", dict2)


Output:

Given Dictionary: {10: 'a', 20: [1, 2, 3], 30: 'c'}
New copy: {10: 'a', 20: [1, 2, 3], 30: 'c'}
Updated copy: {10: 10, 20: [1, 2, '45'], 30: 'c'}


Python Dictionary fromkeys() Method
Python dictionary fromkeys() function returns the dictionary with key mapped and specific value. 
It creates a new dictionary from the given sequence with the specific value.

Syntax : fromkeys(seq, val)

Parameters : 

seq : The sequence to be transformed into a dictionary.
val : Initial values that need to be assigned to the generated keys. Defaults to None.
Returns : A dictionary with keys mapped to None if no value is provided, else to the value provided in the field. 

# Python 3 code to demonstrate
# working of fromkeys()

# initializing sequence
seq = {'a', 'b', 'c', 'd', 'e'}

# using fromkeys() to convert sequence to dict
# initializing with None
res_dict = dict.fromkeys(seq)

# Printing created dict
print("The newly created dict with None values : " + str(res_dict))


# using fromkeys() to convert sequence to dict
# initializing with 1
res_dict2 = dict.fromkeys(seq, 1)

# Printing created dict
print("The newly created dict with 1 as value : " + str(res_dict2))


Output : 

The newly created dict with None values : {‘d’: None, ‘a’: None, ‘b’: None, ‘c’: None, ‘e’: None} 
The newly created dict with 1 as value : {‘d’: 1, ‘a’: 1, ‘b’: 1, ‘c’: 1, ‘e’: 1}


Demonstrating the behavior with mutable objects

# Python 3 code to demonstrate
# behaviour with mutable objects

# initializing sequence and list
seq = {'a', 'b', 'c', 'd', 'e'}
lis1 = [2, 3]

# using fromkeys() to convert sequence to dict
# using conventional method
res_dict = dict.fromkeys(seq, lis1)

# Printing created dict
print("The newly created dict with list values : "
	+ str(res_dict))

# appending to lis1
lis1.append(4)

# Printing dict after appending
# Notice that append takes place in all values
print("The dict with list values after appending : "
	+ str(res_dict))

lis1 = [2, 3]
print('\n')

# using fromkeys() to convert sequence to dict
# using dict. comprehension
res_dict2 = {key: list(lis1) for key in seq}

# Printing created dict
print("The newly created dict with list values : "
	+ str(res_dict2))

# appending to lis1
lis1.append(4)

# Printing dict after appending
# Notice that append doesnt take place now.
print("The dict with list values after appending (no change) : "
	+ str(res_dict2))

Output:

The newly created dict with list values : {‘d’: [2, 3], ‘e’: [2, 3], ‘c’: [2, 3], ‘a’: [2, 3], ‘b’: [2, 3]} 
The dict with list values after appending : {‘d’: [2, 3, 4], ‘e’: [2, 3, 4], ‘c’: [2, 3, 4], ‘a’: [2, 3, 4], ‘b’: [2, 3, 4]}
The newly created dict with list values : {‘d’: [2, 3], ‘e’: [2, 3], ‘c’: [2, 3], ‘a’: [2, 3], ‘b’: [2, 3]} 
The dict with list values after appending (no change) : {‘d’: [2, 3], ‘e’: [2, 3], ‘c’: [2, 3], ‘a’: [2, 3], ‘b’: [2, 3]}


Python Dictionary fromkeys() default value

x = ('key1', 'key2', 'key3')
y = 0

d = dict.fromkeys(x, y)

print(d)

Output:

{'key1': 0, 'key2': 0, 'key3': 0}

Python Dictionary fromkeys() with an empty list

# Python3 code to demonstrate
# to initialize dictionary with list
# using fromkeys()

# using fromkeys() to construct
new_dict = dict.fromkeys(range(4), [])
	
# printing result
print ("New dictionary with empty lists as keys : " + str(new_dict))


Output:

New dictionary with empty lists as keys : {0: [], 1: [], 2: [], 3: []}



Get() method for dictionaries in Python


Python get() method return the value for the given key if present in the dictionary. If not, then it will return None (if get() is used with only one argument).

Syntax : Dict.get(key, default=None)

Parameters: 

key: The keyname of the item you want to return the value from
Value: (Optional) Value to be returned if the key is not found. The default value is None.
Returns: Returns the value of the item with the specified key.


dic = {"A": 1, "B": 2}
print(dic.get("A"))
print(dic.get("C"))
print(dic.get("C", "Not Found ! "))


Output: 

1
None


Python Dictionary get() method nested

# Python3 code to demonstrate working of
# Safe access nested dictionary key
# Using nested get()

# initializing dictionary
test_dict = {'Gfg' : {'is' : 'best'}}

# printing original dictionary
print("The original dictionary is : " + str(test_dict))

# using nested get()
# Safe access nested dictionary key
res = test_dict.get('Gfg', {}).get('is')

# printing result
print("The nested safely accessed value is : " + str(res))


Output:

The original dictionary is : {'Gfg': {'is': 'best'}}
The nested safely accessed value is :  best


Python Dictionary items() method

Dictionary in Python is an unordered collection of data values, used to store data values like a map, 
which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.
In Python Dictionary, items() method is used to return the list with all dictionary keys with values.
 

Syntax: dictionary.items()
Parameters: This method takes no parameters.
Returns: A view object that displays a list of a given dictionary’s (key, value) tuple pair.


# Python program to show working
# of items() method in Dictionary

# Dictionary with three items
Dictionary1 = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' }

print("Dictionary items:")

# Printing all the items of the Dictionary
print(Dictionary1.items())


Output: 
 
Dictionary items:
dict_items([('A', 'Geeks'), ('B', 4), ('C', 'Geeks')])


# Python program to show working
# of items() method in Dictionary

# Dictionary with three items
Dictionary1 = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' }

print("Original Dictionary items:")

items = Dictionary1.items()

# Printing all the items of the Dictionary
print(items)

# Delete an item from dictionary
del[Dictionary1['C']]
print('Updated Dictionary:')
print(items)


Output: 

Original Dictionary items:
dict_items([('A', 'Geeks'), ('C', 'Geeks'), ('B', 4)])
Updated Dictionary:
dict_items([('A', 'Geeks'), ('B', 4)])


Python Dictionary keys() method


Dictionary in Python is a collection of data values which only maintains the order of insertion, used to store data values like a map, 
which, unlike other Data Types that hold only a single value as an element, Dictionary holds key: value pair.

keys() method in Python Dictionary, returns a view object that displays a list of all the keys in the dictionary in order of insertion.
 

Syntax: dict.keys()
Parameters: There are no parameters.
Returns: A view object is returned that displays all the keys. This view object changes according to the changes in the dictionary.


# Python program to show working
# of keys in Dictionary

# Dictionary with three keys
Dictionary1 = {'A': 'Geeks', 'B': 'For', 'C': 'Geeks'}

# Printing keys of dictionary
print(Dictionary1.keys())

# Creating empty Dictionary
empty_Dict1 = {}

# Printing keys of Empty Dictionary
print(empty_Dict1.keys())


Output: 

dict_keys(['A', 'B', 'C'])
dict_keys([])


# Python program to show updation
# of keys in Dictionary

# Dictionary with two keys
Dictionary1 = {'A': 'Geeks', 'B': 'For'}

# Printing keys of dictionary
print("Keys before Dictionary Updation:")
keys = Dictionary1.keys()
print(keys)

# adding an element to the dictionary
Dictionary1.update({'C':'Geeks'})

print('\nAfter dictionary is updated:')
print(keys)


Output: 

Keys before Dictionary Updation:
dict_keys(['B', 'A'])

After dictionary is updated:
dict_keys(['B', 'A', 'C'])



Python Dictionary pop() method

Python dictionary pop() method removes and returns the specified element from the dictionary.

Syntax : dict.pop(key, def)

Parameters : 

key : The key whose key-value pair has to be returned and removed.
def : The default value to return if specified key is not present.
Returns : Value associated to deleted key-value pair, if key is present. 
Default value if specified if key is not present. 
KeyError, if key not present and default value not specified. 


Pop an element from dictionary

# Python 3 code to demonstrate
# working of pop()

# initializing dictionary
test_dict = {"Nikhil": 7, "Akshat": 1, "Akash": 2}

# Printing initial dict
print("The dictionary before deletion : " + str(test_dict))

# using pop to return and remove key-value pair.
pop_ele = test_dict.pop('Akash')

# Printing the value associated to popped key
print("Value associated to poppped key is : " + str(pop_ele))

# Printing dictionary after deletion
print("Dictionary after deletion is : " + str(test_dict))


Output : 

The dictionary before deletion : {'Nikhil': 7, 'Akshat': 1, 'Akash': 2}
Value associated to poppped key is : 2
Dictionary after deletion is : {'Nikhil': 7, 'Akshat': 1}


Python Dictionary popitem() method

Python dictionary popitem() method removes the last inserted key-value pair from the dictionary and returns it as a tuple.

Syntax : dict.popitem() 

Parameters : None 

Returns : A tuple containing the arbitrary key-value pair from dictionary. That pair is removed from dictionary. 

popitem() method return keyError if dictionary is empty.

# Python 3 code to demonstrate
# working of popitem()

# initializing dictionary
test_dict = {"Nikhil": 7, "Akshat": 1, "Akash": 2}

# Printing initial dict
print("The dictionary before deletion : " + str(test_dict))

# using popitem() to return + remove arbitrary
# pair
res = test_dict.popitem()

# Printing the pair returned
print('The arbitrary pair returned is : ' + str(res))

# Printing dict after deletion
print("The dictionary after removal : " + str(test_dict))


Output : 

The dictionary before deletion : {'Nikhil': 7, 'Akshat': 1, 'Akash': 2}
The arbitrary pair returned is : ('Akash', 2)
The dictionary after removal : {'Nikhil': 7, 'Akshat': 1}


# Python3 code to demonstrate working of
# Get random dictionary pair in dictionary
# Using popitem()

# Initialize dictionary
test_dict = {'Gfg' : 1, 'is' : 2, 'best' : 3}

# printing original dictionary
print("The original dictionary is : " + str(test_dict))

# Get random dictionary pair in dictionary
# Using popitem()
res = test_dict.popitem()

# printing result
print("The random pair is : " + str(res))


Output:

The original dictionary is : {'Gfg': 1, 'best': 3, 'is': 2}
The random pair is : ('is', 2)


Python Dictionary | setdefault() method


Dictionary in Python is an unordered collection of data values, 
used to store data values like a map, 
which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.
In Python Dictionary, setdefault() method returns the value of a key (if the key is in dictionary). 
If not, it inserts key with a value to the dictionary.


Syntax: dict.setdefault(key, default_value)
Parameters: It takes two parameters: 
key – Key to be searched in the dictionary. 
default_value (optional) – Key with a value default_value is inserted to the dictionary if key is not in the dictionary. 
If not provided, the default_value will be None.
Returns: 
Value of the key if it is in the dictionary. 
None if key is not in the dictionary and default_value is not specified. 
default_value if key is not in the dictionary and default_value is specified.


# Python program to show working
# of setdefault() method in Dictionary

# Dictionary with single item
Dictionary1 = { 'A': 'Geeks', 'B': 'For', 'C': 'Geeks'}

# using setdefault() method
Third_value = Dictionary1.setdefault('C')
print("Dictionary:", Dictionary1)
print("Third_value:", Third_value)


Output: 
 
Dictionary: {'A': 'Geeks', 'C': 'Geeks', 'B': 'For'}
Third_value: Geeks


When key is not in the dictionary.

# Python program to show working
# of setdefault() method in Dictionary

# Dictionary with single item
Dictionary1 = { 'A': 'Geeks', 'B': 'For'}

# using setdefault() method
# when key is not in the Dictionary
Third_value = Dictionary1.setdefault('C')
print("Dictionary:", Dictionary1)
print("Third_value:", Third_value)

# using setdefault() method
# when key is not in the Dictionary
# but default value is provided
Fourth_value = Dictionary1.setdefault('D', 'Geeks')
print("Dictionary:", Dictionary1)
print("Fourth_value:", Fourth_value)


Output: 
 
Dictionary: {'A': 'Geeks', 'B': 'For', 'C': None}
Third_value: None
Dictionary: {'A': 'Geeks', 'B': 'For', 'C': None, 'D': 'Geeks'}
Fourth_value: Geeks



Python Dictionary update() method

Python Dictionary update() method updates the dictionary with the elements from another dictionary object or from an iterable of key/value pairs.

Syntax: dict.update([other])

Parameters: This method takes either a dictionary or an iterable object of key/value pairs (generally tuples) as parameters.

Returns: It doesn’t return any value but updates the Dictionary with elements from a dictionary object or an iterable object of key/value pairs.


Update with another Dictionary

# Python program to show working
# of update() method in Dictionary

# Dictionary with three items
Dictionary1 = {'A': 'Geeks', 'B': 'For', }
Dictionary2 = {'B': 'Geeks'}

# Dictionary before Updation
print("Original Dictionary:")
print(Dictionary1)

# update the value of key 'B'
Dictionary1.update(Dictionary2)
print("Dictionary after updation:")
print(Dictionary1)


Output: 

Original Dictionary:
{'A': 'Geeks', 'B': 'For'}

Dictionary after updation:
{'A': 'Geeks', 'B': 'Geeks'}


Update with an iterable


# Python program to show working
# of update() method in Dictionary

# Dictionary with single item
Dictionary1 = {'A': 'Geeks'}

# Dictionary before Updation
print("Original Dictionary:")
print(Dictionary1)

# update the Dictionary with iterable
Dictionary1.update(B='For', C='Geeks')
print("Dictionary after updation:")
print(Dictionary1)


Output: 

Original Dictionary:
{'A': 'Geeks'}

Dictionary after updation:
{'C': 'Geeks', 'B': 'For', 'A': 'Geeks'}


Python dictionary update value if the key exists


def checkKey(dict, key):
	
	if key in dict.keys():
		print("Key exist, ", end =" ")
		dict.update({'m':600})
		print("value updated =", 600)
	else:
		print("Not Exist")
dict = {'m': 700, 'n':100, 't':500}

key = 'm'
checkKey(dict, key)
print(dict)

Output:

Key exist,  value updated = 600
{'m': 600, 'n': 100, 't': 500}



Python dictionary | values()


values() is an inbuilt method in Python programming language that returns a view object. 
The view object contains the values of the dictionary, as a list. 
If you use the type() method on the return value, you get “dict_values object”. It must be cast to obtain the actual list.

Syntax:

dictionary_name.values()
Parameters:
There are no parameters

Returns:

returns a list of all the values available in a given dictionary.
the values have been stored in a reversed manner.


# Python3 program for illustration
# of values() method of dictionary


# numerical values
dictionary = {"raj": 2, "striver": 3, "vikram": 4}
print(dictionary.values())


# string values
dictionary = {"geeks": "5", "for": "3", "Geeks": "5"}
print(dictionary.values())


Output:

dict_values([2, 3, 4])
dict_values(['5', '3', '5'])


Given name and salary, return the total salary of all employees.


# Python3 program for illustration
# of values() method in finding total salary


# stores name and corresponding salaries
salary = {"raj" : 50000, "striver" : 60000, "vikram" : 5000}

# stores the salaries only
list1 = salary.values()
print(sum(list1)) # prints the sum of all salaries


Output:

115000



================================================================================================================================================================

Python String Methods:
====================================================================================================================================================================

Python string is a sequence of Unicode characters that is enclosed in the quotations marks. 
In this article, we will discuss the in-built function i.e. the functions provided by the Python to operate on strings. 

Note: Every string method does not change the original string instead returns a new string with the changed attributes. 

Case Changing of Strings
The below functions are used to change the case of the strings.

lower(): Converts all uppercase characters in a string into lowercase
upper(): Converts all lowercase characters in a string into uppercase
title(): Convert string to title case


# Python3 program to show the
# working of upper() function
text = 'geeKs For geEkS'

# upper() function to convert
# string to upper case
print("\nConverted String:")
print(text.upper())

# lower() function to convert
# string to lower case
print("\nConverted String:")
print(text.lower())

# converts the first character to
# upper case and rest to lower case
print("\nConverted String:")
print(text.title())

# original string never changes
print("\nOriginal String")
print(text)


Output:

Converted String:
GEEKS FOR GEEKS

Converted String:
geeks for geeks

Converted String:
Geeks For Geeks

Original String
geeKs For geEkS


string capitalize() in Python


string capitalize() in Python

n Python, the capitalize() method returns a copy of the original string and 
converts the first character of the string to a capital (uppercase) letter while making all other characters in the string lowercase letters.
 

Syntax: 

string_name.capitalize() 

string_name: It is the name of string of
             whose first character we want
			 to capitalize.
Parameter: The capitalize() function does not takes any parameter. 
Return value: The capitalize() function returns a string with the first character in the capital. 
Below is the python program to illustrate capitalize() function: 

# Python program to demonstrate the
# use of capitalize() function

# capitalize() first letter of string
# and make other letters lowercase
name = "geeks FOR geeks"

print(name.capitalize())

# demonstration of individual words
# capitalization to generate camel case
name1 = "geeks"
name2 = "for"
name3 = "geeks"
print(name1.capitalize() + name2.capitalize()
						+ name3.capitalize())


Output: 
 
Geeks for geeks
GeeksForGeek



Python String casefold() Method


Python String casefold() method is used to implement caseless string matching. 
It is similar to lower() string method but case removes all the case distinctions present in a string. i.e ignore cases when comparing.

Syntax: 

string.casefold()

Parameters:

The casefold() method doesn’t take any parameters.

Return value:

It returns the case folded string the string converted to lower case.


Convert String in Lower Case

# Python program to convert string in lower case
string = "GEEKSFORGEEKS"

# print lowercase string
print("lowercase string: ",string.casefold())

Output:

lowercase string: geeksforgeeks


Python String center() Method


Python String center() method creates and returns a new string that is padded with the specified character. 

Syntax: 

string.center(length[, fillchar])

Parameters:

length: length of the string after padding with the characters.
fillchar: (optional) characters which need to be padded. If it’s not provided, space is taken as the default argument.
Returns:

Returns a string padded with specified fillchar and it doesn’t modify the original string.


# Python program to illustrate
# string center() in python
string = "geeks for geeks"

new_string = string.center(24)

# here filchar not provided so takes space by default.
print "After padding String is: ", new_string


Output: 

After padding String is:      geeks for geeks


# Python program to illustrate
# string center() in python
string = "geeks for geeks"

new_string = string.center(24, '#')

# here fillchar is provided
print "After padding String is:", new_string


Output: 

After padding String is: ####geeks for geeks#####



Python String count() Method

Python String count() function is an inbuilt function in python programming language that returns 
the number of occurrences of a substring in the given string.

Syntax: 

string.count(substring, start=…, end=…)

Parameters: 

The count() function has one compulsory and two optional parameters. 
Mandatory parameter: 
substring – string whose count is to be found.
Optional Parameters: 
start (Optional) – starting index within the string where the search starts. 
end (Optional) – ending index within the string where the search ends.
Return Value:

count() method returns an integer that denotes number of times a substring occurs in a given string. 


# Python program to demonstrate the use of
# count() method without optional parameters

# string in which occurrence will be checked
string = "geeks for geeks"

# counts the number of times substring occurs in
# the given string and returns an integer
print(string.count("geeks"))


Output: 

2


# Python program to demonstrate the use of
# count() method using optional parameters

# string in which occurrence will be checked
string = "geeks for geeks"

# counts the number of times substring occurs in
# the given string between index 0 and 5 and returns
# an integer
print(string.count("geeks", 0, 5))

print(string.count("geeks", 0, 15))


Output: 

1
2



Python Strings encode() method

In today’s world, security holds the key in many applications. 
Thus the need for secure storage of passwords in the database is required and hence there is to save encoded versions of strings. 
To achieve this, python in its language has defined “encode()” that encodes strings with the specified encoding scheme. 
There are several encoding schemes defined in the language. 
The Python String encode() method encodes the string, using the specified encoding. 
If no encoding is specified, UTF-8 will be used.

Syntax:

encode(encoding, error)

Parameters: 

encoding: Specifies the encoding on the basis of which encoding has to be performed. 
error: Decides how to handle the errors if they occur, e.g ‘strict’ raises Unicode error in case of exception and ‘ignore’ ignores the errors that occurred. There are six types of error response
strict – default response which raises a UnicodeDecodeError exception on failure
ignore – ignores the unencodable unicode from the result
replace – replaces the unencodable unicode to a question mark ?
xmlcharrefreplace – inserts XML character reference instead of unencodable unicode
backslashreplace – inserts a \uNNNN escape sequence instead of unencodable unicode
namereplace – inserts a \N{…} escape sequence instead of unencodable unicode
Returns: 

Returns the string in the encoded form


# Python3 code to print
# all encodings available

from encodings.aliases import aliases

# Printing list available
print("The available encodings are : ")
print(aliases.keys())


Output: 

The available encodings are : 
dict_keys(['ibm039', 'iso_ir_226', '1140', 'iso_ir_110', '1252', 'iso_8859_8', 'iso_8859_3', 'iso_ir_166', 'cp367', 'uu', 'quotedprintable', 'ibm775', 'iso_8859_16_2001', 'ebcdic_cp_ch', 'gb2312_1980', 'ibm852', 'uhc', 'macgreek', '850', 'iso2022jp_2', 'hz_gb_2312', 'elot_928', 'iso8859_1', 'eucjp', 'iso_ir_199', 'ibm865', 'cspc862latinhebrew', '863', 'iso_8859_5', 'latin4', 'windows_1253', 'csisolatingreek', 'latin5', '855', 'windows_1256', 'rot13', 'ms1361', 'windows_1254', 'ibm863', 'iso_8859_14_1998', 'utf8_ucs2', '500', 'iso8859', '775', 'l7', 'l2', 'gb18030_2000', 'l9', 'utf_32be', 'iso_ir_100', 'iso_8859_4', 'iso_ir_157', 'csibm857', 'shiftjis2004', 'iso2022jp_1', 'iso_8859_2_1987', 'cyrillic', 'ibm861', 'ms950', 'ibm437', '866', 'csibm863', '932', 'iso_8859_14', 'cskoi8r', 'csptcp154', '852', 'maclatin2', 'sjis', 'korean', '865', 'u32', 'csshiftjis', 'dbcs', 'csibm037', 'csibm1026', 'bz2', 'quopri', '860', '1255', '861', 'iso_ir_127', 'iso_celtic', 'chinese', 'l8', '1258', 'u_jis', 'cspc850multilingual', 'iso_2022_jp_2', 'greek8', 'csibm861', '646', 'unicode_1_1_utf_7', 'ibm862', 'latin2', 'ecma_118', 'csisolatinarabic', 'zlib', 'iso2022jp_3', 'ksx1001', '858', 'hkscs', 'shiftjisx0213', 'base64', 'ibm857', 'maccentraleurope', 'latin7', 'ruscii', 'cp_is', 'iso_ir_101', 'us_ascii', 'hebrew', 'ansi_x3.4_1986', 'csiso2022jp', 'iso_8859_15', 'ibm860', 'ebcdic_cp_us', 'x_mac_simp_chinese', 'csibm855', '1250', 'maciceland', 'iso_ir_148', 'iso2022jp', 'u16', 'u7', 's_jisx0213', 'iso_8859_6_1987', 'csisolatinhebrew', 'csibm424', 'quoted_printable', 'utf_16le', 'tis260', 'utf', 'x_mac_trad_chinese', '1256', 'cp866u', 'jisx0213', 'csiso58gb231280', 'windows_1250', 'cp1361', 'kz_1048', 'asmo_708', 'utf_16be', 'ecma_114', 'eucjis2004', 'x_mac_japanese', 'utf8', 'iso_ir_6', 'cp_gr', '037', 'big5_tw', 'eucgb2312_cn', 'iso_2022_jp_3', 'euc_cn', 'iso_8859_13', 'iso_8859_5_1988', 'maccyrillic', 'ks_c_5601_1987', 'greek', 'ibm869', 'roman8', 'csibm500', 'ujis', 'arabic', 'strk1048_2002', '424', 'iso_8859_11_2001', 'l5', 'iso_646.irv_1991', '869', 'ibm855', 'eucjisx0213', 'latin1', 'csibm866', 'ibm864', 'big5_hkscs', 'sjis_2004', 'us', 'iso_8859_7', 'macturkish', 'iso_2022_jp_2004', '437', 'windows_1255', 's_jis_2004', 's_jis', '1257', 'ebcdic_cp_wt', 'iso2022jp_2004', 'ms949', 'utf32', 'shiftjis', 'latin', 'windows_1251', '1125', 'ks_x_1001', 'iso_8859_10_1992', 'mskanji', 'cyrillic_asian', 'ibm273', 'tis620', '1026', 'csiso2022kr', 'cspc775baltic', 'iso_ir_58', 'latin8', 'ibm424', 'iso_ir_126', 'ansi_x3.4_1968', 'windows_1257', 'windows_1252', '949', 'base_64', 'ms936', 'csisolatin2', 'utf7', 'iso646_us', 'macroman', '1253', '862', 'iso_8859_1_1987', 'csibm860', 'gb2312_80', 'latin10', 'ksc5601', 'iso_8859_10', 'utf8_ucs4', 'csisolatin4', 'ebcdic_cp_be', 'iso_8859_1', 'hzgb', 'ansi_x3_4_1968', 'ks_c_5601', 'l3', 'cspc8codepage437', 'iso_8859_7_1987', '8859', 'ibm500', 'ibm1026', 'iso_8859_6', 'csibm865', 'ibm866', 'windows_1258', 'iso_ir_138', 'l4', 'utf_32le', 'iso_8859_11', 'thai', '864', 'euc_jis2004', 'cp936', '1251', 'zip', 'unicodebigunmarked', 'csHPRoman8', 'csibm858', 'utf16', '936', 'ibm037', 'iso_8859_8_1988', '857', 'csibm869', 'ebcdic_cp_he', 'cp819', 'euccn', 'iso_8859_2', 'ms932', 'iso_2022_jp_1', 'iso_2022_kr', 'csisolatin6', 'iso_2022_jp', 'x_mac_korean', 'latin3', 'csbig5', 'hz_gb', 'csascii', 'u8', 'csisolatin5', 'csisolatincyrillic', 'ms_kanji', 'cspcp852', 'rk1048', 'iso2022jp_ext', 'csibm273', 'iso_2022_jp_ext', 'ibm858', 'ibm850', 'sjisx0213', 'tis_620_2529_1', 'l10', 'iso_ir_109', 'ibm1125', '1254', 'euckr', 'tis_620_0', 'l1', 'ibm819', 'iso2022kr', 'ibm367', '950', 'r8', 'hex', 'cp154', 'tis_620_2529_0', 'iso_8859_16', 'pt154', 'ebcdic_cp_ca', 'ibm1140', 'l6', 'csibm864', 'csisolatin1', 'csisolatin3', 'latin6', 'iso_8859_9_1989', 'iso_8859_3_1988', 'unicodelittleunmarked', 'macintosh', '273', 'latin9', 'iso_8859_4_1988', 'iso_8859_9', 'ebcdic_cp_nl', 'iso_ir_144'])



Code to encode the string 
# Python code to demonstrate
# encode()

# initializing string
str = "geeksforgeeks"

# printing the encoded string
print ("The encoded string in utf8 format is : ",)
print (str.encode('utf8', 'ignore'))


Output:

The encoded string in utf8 format is : 
b'geeksforgeeks'


Encoding with the error parameter
# unicode string
string = 'GeeksforGeeks'

# print string
print('The string is:', string)

# ignore error
print(string.encode("ascii", "ignore"))

# replace error
print(string.encode("ascii", "replace"))



Output:

The string is: GeeksforGeeks
b'GeeksforGeeks'
b'GeeksforGeeks'


Python String endswith() Method


Python String endswith() method returns True if a string ends with the given suffix otherwise returns False.

Syntax:

str.endswith(suffix, start, end)

Parameters: 

suffix: Suffix is nothing but a string that needs to be checked. 
start: Starting position from where suffix is needed to be checked within the string. 
end: Ending position + 1 from where suffix is needed to be checked within the string.  
Note: If start and end index is not provided then by default it takes 0 and length -1 as starting and ending indexes 
where ending index is not included in our search.

Returns: 
It returns True if the string ends with the given suffix otherwise return False. 


Working of endswith() method Without start and end Parameters

# Python code shows the working of
# .endswith() function

text = "geeks for geeks."

# returns False
result = text.endswith('for geeks')
print (result)

# returns True
result = text.endswith('geeks.')
print (result)

# returns True
result = text.endswith('for geeks.')
print (result)

# returns True
result = text.endswith('geeks for geeks.')
print (result)


Output: 

False
True
True
True



expandtabs() method in Python

expandtabs is a method specified in Strings in Python 3.

Sometimes, there is a need of specifying the space in the string, 
but the amount of space to be left is uncertain and depending upon the environment and conditions. 
For these cases, the need to modify the string, again and again, is a tedious task. 
Hence python in its library has “expandtabs()” which specifies the amount of space to be substituted with the “\t” symbol in the string.


Syntax : expandtabs(space_size)

Parameters :
space_size : Specifies the space that is to be replaced with the “\t” symbol in the string. By default the space is 8.

Returns : Returns the modified string with tabs replaced by the space.


# Python3 code to demonstrate
# exception of expandtabs()

# initializing string
st = "i\tlove\tgfg"

# using expandtabs to insert spacing
try:
	print("Modified string using default spacing: ")
	print(st.expandtabs(10.5))
	
except Exception as e:
	print("Error !! The error occurred is :")
	print(str(e))



Output:

Modified string using default spacing: 
Error !! The error occurred is :
integer argument expected, got float



Python String find() method


Python String find() method returns the lowest index of the substring if it is found in a given string. If it is not found then it returns -1. 
Syntax:

str.find(sub, start, end)

Parameters: 

sub: It’s the substring that needs to be searched in the given string. 
start: Starting position where the sub needs to be checked within the string. 
end: Ending position where suffix needs to be checked within the string. 
Note #1: If start and end indexes are not provided then by default it takes 0 and length-1 as starting and ending indexes where ending indexes are not included in our search. 

Returns: 

Returns the lowest index of the substring if it is found in a given string. If it’s not found then it returns -1

#find() With No start and end Argument
word = 'geeks for geeks'

# returns first occurrence of Substring
result = word.find('geeks')
print ("Substring 'geeks' found at index:", result )

result = word.find('for')
print ("Substring 'for ' found at index:", result )

# How to use find()
if (word.find('pawan') != -1):
	print ("Contains given substring ")
else:
	print ("Doesn't contains given substring")

Output: 

Substring 'geeks' found at index: 0
Substring 'for ' found at index: 6
Doesn't contains given substring



#find() With start and end Arguments
word = 'geeks for geeks'

# Substring is searched in 'eks for geeks'
print(word.find('ge', 2))

# Substring is searched in 'eks for geeks'
print(word.find('geeks ', 2))

# Substring is searched in 's for g'
print(word.find('g', 4, 10))

# Substring is searched in 's for g'
print(word.find('for ', 4, 11))


Output: 

10
-1
-1
6



Python String format() Method


Python format() function has been introduced for handling complex string formatting more efficiently. 
This method of the built-in string class provides functionality for complex variable substitutions and value formatting. 
This new formatting technique is regarded as more elegant. The general syntax of format() method is string.format(var1, var2,…)

Syntax : { } .format(value)

Parameters : 
(value) : Can be an integer, floating point numeric constant, string, characters or even variables.
Returntype : Returns a formatted string with the value passed as parameter in the placeholder position.

# Python3 program to demonstrate
# the str.format() method

# using format option in a simple string
print("{}, A computer science portal for geeks."
	.format("GeeksforGeeks"))

# using format option for a
# value stored in a variable
str = "This article is written in {}"
print(str.format("Python"))

# formatting a string using a numeric constant
print("Hello, I am {} years old !".format(18))


Output :

GeeksforGeeks, A computer science portal for geeks.
This article is written in Python
Hello, I am  18 years old!



Python String format_map() Method

Python String format_map() method is an inbuilt function in Python, which is used to return a dictionary key’s value.

Syntax: 

string.format_map(z)

Parameters: 

Here z is a variable in which the input dictionary is stored and string is the key of the input dictionary. input_dict: Takes a single parameter which is the input dictionary.

Returns: 

Returns key’s values of the input dictionary.


#Python String format_map() method
# input stored in variable a.
a = {'x':'John', 'y':'Wick'}

# Use of format_map() function
print("{x}'s last name is {y}".format_map(a))


Output: 

John's last name is Wick


# input stored in variable a.
a = {'x':"geeksforgeeks", 'y':'b'}

# Use of format_map() function
print('{x} {y}'.format_map(a))


Output: 

geeksforgeeks b



Python String index() Method

Finding the string(substring) in a string is an application that has many uses in day-to-day life. 
Python offers this using a function index(), 
which returns the position of the first occurrence of a substring in a string. 

Syntax: 

ch.index(ch1, begp, endp)

Parameters: 

ch1 : The string to be searched for.
begp (default : 0) : This function specifies the position from where search has to be started. 
endp (default : string_len) : This function specifies the position from where search has to end.
Return Value: 

Returns the first position of the substring found.

Exception: 

Raises ValueError if argument string is not found.


# Python code to demonstrate the working of
# index()

# initializing target string
ch = "geeksforgeeks"

# initializing argument string
ch1 = "geeks"

# using index() to find position of "geeks"
# starting from 2nd index
# prints 8
pos = ch.index(ch1,2)

print ("The first position of geeks after 2nd index : ",end="")
print (pos)


Output: 

The first position of geeks after 2nd index : 8



Python String isalnum() Method

Python String isalnum() method checks whether all the characters in a given string are alphanumeric or not. 
Alphanumeric means a character that is either a letter or a number.

Syntax: 

string_name.isalnum() 

Parameter: 

isalnum() method takes no parameters 

Return: 

True: If all the characters are alphanumeric 
False: If one or more characters are not alphanumeric.


# Python program to demonstrate the use of
# isalnum() method

# here a,b and c are characters and 1,2 and 3
# are numbers
string = "abc123"
print(string.isalnum())

# here a,b and c are characters and 1,2 and 3
# are numbers but space is not a alphanumeric
# character
string = "abc 123"
print(string.isalnum())

Output: 

True
False


Python String isalpha() Method

Python String isalpha() method is a built-in method used for string handling. 
The isalpha() methods returns “True” if all characters in the string are alphabets, Otherwise, It returns “False”.  
This function is used to check if the argument includes only alphabet characters (mentioned below).

Syntax: 

string.isalpha()

Parameters:

isalpha() does not take any parameters

Returns:

True: If all characters in the string are alphabet.
False: If the string contains 1 or more non-alphabets.
Errors and Exceptions:

It contains no arguments, therefore an error occurs if a parameter is passed
Both uppercase and lowercase alphabets return “True”
Space is not considered to be the alphabet, therefore it returns “False”


# Python code for implementation of isalpha()

# checking for alphabets
string = 'Ayush'
print(string.isalpha())

string = 'Ayush0212'
print(string.isalpha())

# checking if space is an alphabet
string = 'Ayush Saxena'
print( string.isalpha())


Output: 

True
False
False


Python string | isdecimal()

isdecimal()-It is a function in Python that returns true if all characters in a string are decimal. 
If all characters are not decimal then it returns false.

Syntax:

string_name.isdecimal()
Here string_name is the string whose characters are to be checked

Parameters:This method does not takes any parameters .

Returns Value:

True – all characters are decimal
False – one or more then one character is not decimal.


# Python3 program to demonstrate the use
# of isdecimal()

s = "12345"
print(s.isdecimal())

# contains alphabets
s = "12geeks34"
print(s.isdecimal())

# contains numbers and spaces
s = "12 34"
print(s.isdecimal())


Output:

True
False
False



Python String isdigit() Method

Python String isdigit() method is a built-in method used for string handling. 
The isdigit() method returns “True” if all characters in the string are digits, Otherwise, It returns “False”. 
This function is used to check if the argument contains digits such as 0123456789

Syntax:

string.isdigit()

Parameters:

isdigit() does not take any parameters

Returns:

True – If all characters in the string are digits.
False – If the string contains 1 or more non-digits.
Errors And Exceptions:  

It does not take any arguments, therefore it returns an error if a parameter is passed
Superscript and subscripts are considered digit characters along with decimal characters, therefore, isdigit() returns “True”.
The Roman numerals, currency numerators, and fractions are not considered to be digits. Therefore, the isdigit() returns “False”


# Python code for implementation of isdigit()

# checking for digit
string = '15460'
print(string.isdigit())

string = '154ayush60'
print(string.isdigit())


Output: 

True
False


#String Containing digits and Numeric Characters
s = '23455'
print(s.isdigit())

# s = '²3455'
# subscript is a digit
s = '\u00B23455'

print(s.isdigit())

# s = '½'
# fraction is not a digit
s = '\u00BD'

print(s.isdigit())

Output:

True
True
False



Python String isidentifier() Method

Python String isidentifier() method is used to check whether a string is a valid identifier or not. 
The method returns True if the string is a valid identifier else returns False. 


Syntax: 

string.isidentifier()

Parameters:

The method does not take any parameters

Return Value: 

The method can return one of the two values: 

True: When the string is a valid identifier.
False: When the string is not a valid identifier.


# Python code to illustrate
# the working of isidentifier()

# String with spaces
string = "Geeks for Geeks"
print(string.isidentifier())

# A Perfect identifier
string = "GeeksforGeeks"
print(string.isidentifier())

# Empty string
string = ""
print(string.isidentifier())

# Alphanumerical string
string = "Geeks0for0Geeks"
print(string.isidentifier())

# Beginning with an integer
string = "54Geeks0for0Geeks"
print(string.isidentifier())



Output: 

False
True
False
True
False


Python String islower() method

Python String islower() method checks if all characters in the string are lowercase. 
This method returns True if all alphabets in a string are lowercase alphabets. 
If the string contains at least one uppercase alphabet, it returns False.

Syntax: 

string.islower()

Parameters: 

None

Returns: 

True: If all the letters in the string are in lower case and
False: If even one of them is in upper case.


# Python3 code to demonstrate
# working of islower()

# initializing string
islow_str = "geeksforgeeks"
not_islow = "Geeksforgeeks"

# checking which string is
# completely lower
print ("Is geeksforgeeks full lower ? : " + str(islow_str.islower()))
print ("Is Geeksforgeeks full lower ? : " + str(not_islow.islower()))


Output: 

Is geeksforgeeks full lower ? : True
Is Geeksforgeeks full lower ? : False



Python String isnumeric() Method

Python String isnumeric() method is a built-in method used for string handling. 
The issnumeric() method returns “True” if all characters in the string are numeric characters, Otherwise, 
It returns “False”. 
This function is used to check if the argument contains all numeric characters 
such as integers, fractions, subscript, superscript, roman numerals, etc.(all written in Unicode)

Syntax: 

string.isnumeric()

Parameters:

isnumeric() does not take any parameters

Returns :

True – If all characters in the string are numeric characters.
False – If the string contains 1 or more non-numeric characters.
Errors and Exceptions:

It does not contain any arguments, therefore, it returns an error if a parameter is passed.
Whitespaces are not considered to be numeric, therefore, it returns “False”
Subscript, Superscript, Fractions, Roman numerals (all written in Unicode)are all considered to be numeric, Therefore, it returns “True”


# Python code for implementation of isnumeric()
	
# checking for numeric characters
string = '123ayu456'
print(string.isnumeric())

string = '123456'
print( string.isnumeric())


Output: 

False
True



Python String isprintable() Method


Python String isprintable() is a built-in method used for string handling. 
The isprintable() method returns “True” if all characters in the string are printable or the string is empty, Otherwise, It returns “False”. 
This function is used to check if the argument contains any printable characters such as:

Digits ( 0123456789 )
Uppercase letters ( ABCDEFGHIJKLMNOPQRSTUVWXYZ )
Lowercase letters ( abcdefghijklmnopqrstuvwxyz )
Punctuation characters ( !”#$%&'()*+, -./:;?@[\]^_`{ | }~ )
Space ( )


yntax: 

string.isprintable()

Parameters:

isprintable() does not take any parameters

Returns:

True – If all characters in the string are printable or the string is empty.
False – If the string contains 1 or more nonprintable characters.
Errors Or Exceptions:

The function does not take any arguments, therefore no parameters should be passed, otherwise, it returns an error.
The only whitespace character which is printable is space or ” “, otherwise every whitespace character is non-printable and the function returns “False”.
The empty string is considered printable and it returns “True”.


# Python code for implementation of isprintable()

# checking for printable characters
string = 'My name is Ayush'
print(string.isprintable())

# checking if \n is a printable character
string = 'My name is \n Ayush'
print(string.isprintable())

# checking if space is a printable character
string = ''
print( string.isprintable())


Output: 

True
False
True


Python String isspace() Method

Python String isspace() is a built-in method used for string handling. 
The isspace() method returns “True” if all characters in the string are whitespace characters, Otherwise, It returns “False”. 
This function is used to check if the argument contains all whitespace characters such as:
‘ ‘ – Space
‘\t’ – Horizontal tab
‘\n’ – Newline
‘\v’ – Vertical tab
‘\f’ – Feed
‘\r’ – Carriage return

Syntax:

string.isspace()

Parameters:

isspace() does not take any parameters

Returns:

True – If all characters in the string are whitespace characters.
False – If the string contains 1 or more non-whitespace characters.


# Python code for implementation of isspace()

# checking for whitespace characters
string = 'Geeksforgeeks'

print(string.isspace())

# checking if \n is a whitespace character
string = '\n \n \n'

print(string.isspace())

string = 'Geeks\nfor\ngeeks'
print( string.isspace())



Output: 

False
True
False



Python String istitle() Method

Python String istitle() method returns True if the string is a titlecased string otherwise it returns False. 
What is titlecased? The string which has the first character in each word Uppercase and remaining all characters Lowercase alphabets. 

Syntax: 

string.istitle()

Parameters: 

The istitle() method doesn’t take any parameters.

Returns: 

True if the string is a titlecased string otherwise it returns False.


# First character in each word is
# uppercase and remaining lowercases
s = 'Geeks For Geeks'
print(s.istitle())

# First character in first
# word is lowercase
s = 'geeks For Geeks'
print(s.istitle())

# Third word has uppercase
# characters at middle
s = 'Geeks For GEEKs'
print(s.istitle())

s = '6041 Is My Number'
print(s.istitle())

# word has uppercase
# characters at middle
s = 'GEEKS'
print(s.istitle())


Output: 

True
False
False
True
False


Python String isupper() method

Python String isupper() method returns whether or not all characters in a string are uppercased or not.

Syntax:

string.isupper()

Parameters:

The isupper() method doesn’t take any parameters.

Returns:

True if all the letters in the string are in the upper case and False if even one of them is in the lower case. 


# Python3 code to demonstrate
# working of isupper()

# initializing string
isupp_str = "GEEKSFORGEEKS"
not_isupp = "Geeksforgeeks"

# Checking which string is
# completely uppercase
print ("Is GEEKSFORGEEKS full uppercase ? : " + str(isupp_str.isupper()))
print ("Is Geeksforgeeks full uppercase ? : " + str(not_isupp.isupper()))


Output: 

Is GEEKSFORGEEKS full uppercase ? : True
Is Geeksforgeeks full uppercase ? : False


Python String join() Method


Python String join() method is a string method and returns a string in which the elements of the sequence have been joined by the str separator.

Syntax: 

string_name.join(iterable) 

Parameters: 

The join() method takes iterable – objects capable of returning their members one at a time. Some examples are List, Tuple, String, Dictionary, and Set

Return Value: 

The join() method returns a string concatenated with the elements of iterable. 

Type Error:

If the iterable contains any non-string values, it raises a TypeError exception. 


# Python program to demonstrate the
# use of join function to join list
# elements with a character.

list1 = ['1','2','3','4']

s = "-"

# joins elements of list1 by '-'
# and stores in sting s
s = s.join(list1)

# join use to join a list of
# strings to a separator s
print(s)



Output: 

1-2-3-4


String rjust() and ljust() in python()

String rjust() The string rjust() method returns a new string of given length after substituting a given character in left side of original string.
Syntax:

string.rjust(length, fillchar)
Parameters:

length: length of the modified string. If length is less than or equal to the length of the original string then original string is returned.
fillchar: (optional) characters which needs to be padded. If it’s not provided, space is taken as a default argument.

Returns:

Returns a new string of given length after substituting a given character in left side of original string


# Python program to demonstrate working of
# rjust()
string = 'geeks'
length = 8

# If no fill character is provided, space
# is used as fill character
print(string.rjust(length))


Output:

   geeks
   
# example string
string = 'geeks'
length = 8
fillchar = '*'

print(string.rjust(length, fillchar))


Output:

***geeks 


String ljust()
The string ljust() method returns a new string of given length after substituting a given character in right side of original string.

Syntax:

string.ljust(length, fillchar)

Parameters:

length: length of the modified string. 
If length is less than or equal to the length of the original string then original string is returned.
fillchar: (optional) characters which needs to be padded. If it’s not provided, space is taken as a default argument.

Returns:

Returns a new string of given length after substituting a given character in right side of original string.


# example string
string = 'geeks'
length = 8

# If no fill character is provided, space
# is used as fill character.
print(string.ljust(length))


Output: (Three spaces are printed after geeks)

geeks 



# example string
string = 'geeks'
length = 8
fillchar = '*'

# print left justified string
print(string.ljust(length, fillchar))


Output:

geeks*** 


Python String | replace()

replace() is an inbuilt function in the Python programming language that returns 
a copy of the string where all occurrences of a substring are replaced with another substring. 


Syntax : 

string.replace(old, new, count)
Parameters : 
 

old – old substring you want to replace. 
new – new substring which would replace the old substring.
count – the number of times you want to replace the old substring with the new substring. (Optional ) 

Return Value : 
It returns a copy of the string where all occurrences of a substring are replaced with another substring. 
 

Note: 

If count is not specified then all the occurrences of the old substring are replaced with the new substring.
This method returns the copy of the string i.e. it does not change the original string. 


# Python3 program to demonstrate the
# use of replace() method

string = "geeks for geeks geeks geeks geeks"

# Prints the string by replacing all
# geeks by Geeks
print(string.replace("geeks", "Geeks"))

# Prints the string by replacing only
# 3 occurrence of Geeks
print(string.replace("geeks", "GeeksforGeeks", 3))


Output : 
 

Geeks for Geeks Geeks Geeks Geeks
GeeksforGeeks for GeeksforGeeks GeeksforGeeks geeks geeks


# Python3 program to demonstrate the
# use of replace() method

string = "geeks for geeks geeks geeks geeks"

# Prints the string by replacing
# e by a
print(string.replace("e", "a"))

# Prints the string by replacing only
# 3 occurrence of ek by a
print(string.replace("ek", "a", 3))


Output: 
 

gaaks for gaaks gaaks gaaks gaaks
geas for geas geas geeks geeks



Python string | swapcase()


The string swapcase() method converts all uppercase characters to lowercase and vice versa of the given string, and returns it.

Syntax:

string_name.swapcase()
Here string_name is the string whose cases are to be swapped.

Parameter: The swapcase() method does not takes any parameter.

Return value:

The swapcase() method returns a string with all the cases changed.


# Python program to demonstrate the use of
# swapcase() method

string = "gEEksFORgeeks"

# prints after swappong all cases
print(string.swapcase())

string = "striver"
print(string.swapcase())


Output:

GeeKSforGEEKS
STRIVER


Python | String translate()


translate() returns a string that is modified string of givens string according to given translation mappings.

There are two ways to translate :

Providing a mapping as a dictionary
Parameters :

string.translate(mapping)

mapping – a dictionary having mapping between two characters.
Returns : Returns modified string where each character is mapped to its corresponding character according to the provided mapping table.



# Python3 code to demonstrate
# translations without
# maketrans()

# specifying the mapping
# using ASCII
table = { 119 : 103, 121 : 102, 117 : None }

# target string
trg = "weeksyourweeks"

# Printing original string
print ("The string before translating is : ", end ="")
print (trg)

# using translate() to make translations.
print ("The string after translating is : ", end ="")
print (trg.translate(table))


Output:
The string before translating is : weeksyourweeks
The string after translating is : geeksforgeeks



# Python 3 Program to show working
# of translate() method

# specifying the mapping
# using ASCII
translation = {103: None, 101: None, 101: None}

string = "geeks"
print("Original string:", string)

# translate string
print("Translated string:",
	string.translate(translation))



Output:
Original string: geeks
Translated string: ks






