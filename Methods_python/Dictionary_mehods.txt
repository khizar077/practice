============================================================================================================================================================
Python Dictionary Methods:
=============================================================================================================================================================

Python Dictionary is like a map that is used to store data in the form of a key:value pair. 
Python provides various in-built functions to deal with dictionaries. 
In this article, we will see a list of all the functions provided by the Python to work with dictionaries.

Below functions can be used to access dictionary items (both key and value).

get(): This function returns the value for the given key
keys(): This function returns a view object that displays a list of all the keys in the dictionary in order of insertion
values(): This function returns a list of all the values available in a given dictionary
items(): This function returns the list with all dictionary keys with values
Example: Accessing Dictionary Items.


# Python program to demonstrate working
# of dictionary copy
dic = {1:'geeks', 2:'for', 3:'geeks'}
print('original: ', dic)

# Accessing value for key
print(dic.get(1))

# Accessing keys for the dictionary
print(dic.keys())

# Accessing keys for the dictionary
print(dic.values())

# Printing all the items of the Dictionary
print(dic.items())


Output
original:  {1: 'geeks', 2: 'for', 3: 'geeks'}
geeks
dict_keys([1, 2, 3])
dict_values(['geeks', 'for', 'geeks'])
dict_items([(1, 'geeks'), (2, 'for'), (3, 'geeks')])


Python Dictionary clear()
The clear() method removes all items from the dictionary.

Syntax:

dict.clear()
Parameters:

The clear() method doesn't take any parameters.
Returns:

The clear() method doesn't return any value.


# Python program to demonstrate working of
# dictionary clear()
text = {1: "geeks", 2: "for"}

text.clear()
print('text =', text)


Output:

text = {}



# Python code to demonstrate difference
# clear and {}.

text1 = {1: "geeks", 2: "for"}
text2 = text1

# Using clear makes both text1 and text2
# empty.
text1.clear()

print('After removing items using clear()')
print('text1 =', text1)
print('text2 =', text2)

text1 = {1: "one", 2: "two"}
text2 = text1

# This makes only text1 empty.
text1 = {}

print('After removing items by assigning {}')
print('text1 =', text1)
print('text2 =', text2)


Output:

After removing items using clear()
text1 = {}
text2 = {}
After removing items by assigning {}
text1 = {}
text2 = {1: 'one', 2: 'two'}


Python Dictionary copy()

Python Dictionary copy() method returns a shallow copy of the dictionary.

Python Dictionary copy() Syntax: 
dict.copy()

Python Dictionary copy() Parameters: 
The copy() method doesn’t take any parameters.

Python Dictionary copy() Returns: 
This method doesn’t modify the original, dictionary just returns copy of the dictionary.


# Python program to demonstrate working
# of dictionary copy
original = {1: 'geeks', 2: 'for'}

# copying using copy() function
new = original.copy()

# removing all elements from the list
# Only new list becomes empty as copy()
# does shallow copy.
new.clear()

print('new: ', new)
print('original: ', original)



Output: 

new:  {}
original:  {1: 'geeks', 2: 'for'}


Python Dictionary copy() and update


# given dictionary
dict1 = {10: 'a', 20: [1, 2, 3], 30: 'c'}
print("Given Dictionary:", dict1)

# new dictionary and
# copying using copy() method
dict2 = dict1.copy()
print("New copy:", dict2)

# Updating dict2 elements and
# checking the change in dict1
dict2[10] = 10
dict2[20][2] = '45' # list item updated

print("Updated copy:", dict2)


Output:

Given Dictionary: {10: 'a', 20: [1, 2, 3], 30: 'c'}
New copy: {10: 'a', 20: [1, 2, 3], 30: 'c'}
Updated copy: {10: 10, 20: [1, 2, '45'], 30: 'c'}


Python Dictionary fromkeys() Method
Python dictionary fromkeys() function returns the dictionary with key mapped and specific value. 
It creates a new dictionary from the given sequence with the specific value.

Syntax : fromkeys(seq, val)

Parameters : 

seq : The sequence to be transformed into a dictionary.
val : Initial values that need to be assigned to the generated keys. Defaults to None.
Returns : A dictionary with keys mapped to None if no value is provided, else to the value provided in the field. 

# Python 3 code to demonstrate
# working of fromkeys()

# initializing sequence
seq = {'a', 'b', 'c', 'd', 'e'}

# using fromkeys() to convert sequence to dict
# initializing with None
res_dict = dict.fromkeys(seq)

# Printing created dict
print("The newly created dict with None values : " + str(res_dict))


# using fromkeys() to convert sequence to dict
# initializing with 1
res_dict2 = dict.fromkeys(seq, 1)

# Printing created dict
print("The newly created dict with 1 as value : " + str(res_dict2))


Output : 

The newly created dict with None values : {‘d’: None, ‘a’: None, ‘b’: None, ‘c’: None, ‘e’: None} 
The newly created dict with 1 as value : {‘d’: 1, ‘a’: 1, ‘b’: 1, ‘c’: 1, ‘e’: 1}


Demonstrating the behavior with mutable objects

# Python 3 code to demonstrate
# behaviour with mutable objects

# initializing sequence and list
seq = {'a', 'b', 'c', 'd', 'e'}
lis1 = [2, 3]

# using fromkeys() to convert sequence to dict
# using conventional method
res_dict = dict.fromkeys(seq, lis1)

# Printing created dict
print("The newly created dict with list values : "
	+ str(res_dict))

# appending to lis1
lis1.append(4)

# Printing dict after appending
# Notice that append takes place in all values
print("The dict with list values after appending : "
	+ str(res_dict))

lis1 = [2, 3]
print('\n')

# using fromkeys() to convert sequence to dict
# using dict. comprehension
res_dict2 = {key: list(lis1) for key in seq}

# Printing created dict
print("The newly created dict with list values : "
	+ str(res_dict2))

# appending to lis1
lis1.append(4)

# Printing dict after appending
# Notice that append doesnt take place now.
print("The dict with list values after appending (no change) : "
	+ str(res_dict2))

Output:

The newly created dict with list values : {‘d’: [2, 3], ‘e’: [2, 3], ‘c’: [2, 3], ‘a’: [2, 3], ‘b’: [2, 3]} 
The dict with list values after appending : {‘d’: [2, 3, 4], ‘e’: [2, 3, 4], ‘c’: [2, 3, 4], ‘a’: [2, 3, 4], ‘b’: [2, 3, 4]}
The newly created dict with list values : {‘d’: [2, 3], ‘e’: [2, 3], ‘c’: [2, 3], ‘a’: [2, 3], ‘b’: [2, 3]} 
The dict with list values after appending (no change) : {‘d’: [2, 3], ‘e’: [2, 3], ‘c’: [2, 3], ‘a’: [2, 3], ‘b’: [2, 3]}


Python Dictionary fromkeys() default value

x = ('key1', 'key2', 'key3')
y = 0

d = dict.fromkeys(x, y)

print(d)

Output:

{'key1': 0, 'key2': 0, 'key3': 0}

Python Dictionary fromkeys() with an empty list

# Python3 code to demonstrate
# to initialize dictionary with list
# using fromkeys()

# using fromkeys() to construct
new_dict = dict.fromkeys(range(4), [])
	
# printing result
print ("New dictionary with empty lists as keys : " + str(new_dict))


Output:

New dictionary with empty lists as keys : {0: [], 1: [], 2: [], 3: []}



Get() method for dictionaries in Python


Python get() method return the value for the given key if present in the dictionary. If not, then it will return None (if get() is used with only one argument).

Syntax : Dict.get(key, default=None)

Parameters: 

key: The keyname of the item you want to return the value from
Value: (Optional) Value to be returned if the key is not found. The default value is None.
Returns: Returns the value of the item with the specified key.


dic = {"A": 1, "B": 2}
print(dic.get("A"))
print(dic.get("C"))
print(dic.get("C", "Not Found ! "))


Output: 

1
None


Python Dictionary get() method nested

# Python3 code to demonstrate working of
# Safe access nested dictionary key
# Using nested get()

# initializing dictionary
test_dict = {'Gfg' : {'is' : 'best'}}

# printing original dictionary
print("The original dictionary is : " + str(test_dict))

# using nested get()
# Safe access nested dictionary key
res = test_dict.get('Gfg', {}).get('is')

# printing result
print("The nested safely accessed value is : " + str(res))


Output:

The original dictionary is : {'Gfg': {'is': 'best'}}
The nested safely accessed value is :  best


Python Dictionary items() method

Dictionary in Python is an unordered collection of data values, used to store data values like a map, 
which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.
In Python Dictionary, items() method is used to return the list with all dictionary keys with values.
 

Syntax: dictionary.items()
Parameters: This method takes no parameters.
Returns: A view object that displays a list of a given dictionary’s (key, value) tuple pair.


# Python program to show working
# of items() method in Dictionary

# Dictionary with three items
Dictionary1 = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' }

print("Dictionary items:")

# Printing all the items of the Dictionary
print(Dictionary1.items())


Output: 
 
Dictionary items:
dict_items([('A', 'Geeks'), ('B', 4), ('C', 'Geeks')])


# Python program to show working
# of items() method in Dictionary

# Dictionary with three items
Dictionary1 = { 'A': 'Geeks', 'B': 4, 'C': 'Geeks' }

print("Original Dictionary items:")

items = Dictionary1.items()

# Printing all the items of the Dictionary
print(items)

# Delete an item from dictionary
del[Dictionary1['C']]
print('Updated Dictionary:')
print(items)


Output: 

Original Dictionary items:
dict_items([('A', 'Geeks'), ('C', 'Geeks'), ('B', 4)])
Updated Dictionary:
dict_items([('A', 'Geeks'), ('B', 4)])


Python Dictionary keys() method


Dictionary in Python is a collection of data values which only maintains the order of insertion, used to store data values like a map, 
which, unlike other Data Types that hold only a single value as an element, Dictionary holds key: value pair.

keys() method in Python Dictionary, returns a view object that displays a list of all the keys in the dictionary in order of insertion.
 

Syntax: dict.keys()
Parameters: There are no parameters.
Returns: A view object is returned that displays all the keys. This view object changes according to the changes in the dictionary.


# Python program to show working
# of keys in Dictionary

# Dictionary with three keys
Dictionary1 = {'A': 'Geeks', 'B': 'For', 'C': 'Geeks'}

# Printing keys of dictionary
print(Dictionary1.keys())

# Creating empty Dictionary
empty_Dict1 = {}

# Printing keys of Empty Dictionary
print(empty_Dict1.keys())


Output: 

dict_keys(['A', 'B', 'C'])
dict_keys([])


# Python program to show updation
# of keys in Dictionary

# Dictionary with two keys
Dictionary1 = {'A': 'Geeks', 'B': 'For'}

# Printing keys of dictionary
print("Keys before Dictionary Updation:")
keys = Dictionary1.keys()
print(keys)

# adding an element to the dictionary
Dictionary1.update({'C':'Geeks'})

print('\nAfter dictionary is updated:')
print(keys)


Output: 

Keys before Dictionary Updation:
dict_keys(['B', 'A'])

After dictionary is updated:
dict_keys(['B', 'A', 'C'])



Python Dictionary pop() method

Python dictionary pop() method removes and returns the specified element from the dictionary.

Syntax : dict.pop(key, def)

Parameters : 

key : The key whose key-value pair has to be returned and removed.
def : The default value to return if specified key is not present.
Returns : Value associated to deleted key-value pair, if key is present. 
Default value if specified if key is not present. 
KeyError, if key not present and default value not specified. 


Pop an element from dictionary

# Python 3 code to demonstrate
# working of pop()

# initializing dictionary
test_dict = {"Nikhil": 7, "Akshat": 1, "Akash": 2}

# Printing initial dict
print("The dictionary before deletion : " + str(test_dict))

# using pop to return and remove key-value pair.
pop_ele = test_dict.pop('Akash')

# Printing the value associated to popped key
print("Value associated to poppped key is : " + str(pop_ele))

# Printing dictionary after deletion
print("Dictionary after deletion is : " + str(test_dict))


Output : 

The dictionary before deletion : {'Nikhil': 7, 'Akshat': 1, 'Akash': 2}
Value associated to poppped key is : 2
Dictionary after deletion is : {'Nikhil': 7, 'Akshat': 1}


Python Dictionary popitem() method

Python dictionary popitem() method removes the last inserted key-value pair from the dictionary and returns it as a tuple.

Syntax : dict.popitem() 

Parameters : None 

Returns : A tuple containing the arbitrary key-value pair from dictionary. That pair is removed from dictionary. 

popitem() method return keyError if dictionary is empty.

# Python 3 code to demonstrate
# working of popitem()

# initializing dictionary
test_dict = {"Nikhil": 7, "Akshat": 1, "Akash": 2}

# Printing initial dict
print("The dictionary before deletion : " + str(test_dict))

# using popitem() to return + remove arbitrary
# pair
res = test_dict.popitem()

# Printing the pair returned
print('The arbitrary pair returned is : ' + str(res))

# Printing dict after deletion
print("The dictionary after removal : " + str(test_dict))


Output : 

The dictionary before deletion : {'Nikhil': 7, 'Akshat': 1, 'Akash': 2}
The arbitrary pair returned is : ('Akash', 2)
The dictionary after removal : {'Nikhil': 7, 'Akshat': 1}


# Python3 code to demonstrate working of
# Get random dictionary pair in dictionary
# Using popitem()

# Initialize dictionary
test_dict = {'Gfg' : 1, 'is' : 2, 'best' : 3}

# printing original dictionary
print("The original dictionary is : " + str(test_dict))

# Get random dictionary pair in dictionary
# Using popitem()
res = test_dict.popitem()

# printing result
print("The random pair is : " + str(res))


Output:

The original dictionary is : {'Gfg': 1, 'best': 3, 'is': 2}
The random pair is : ('is', 2)


Python Dictionary | setdefault() method


Dictionary in Python is an unordered collection of data values, 
used to store data values like a map, 
which unlike other Data Types that hold only single value as an element, Dictionary holds key : value pair.
In Python Dictionary, setdefault() method returns the value of a key (if the key is in dictionary). 
If not, it inserts key with a value to the dictionary.


Syntax: dict.setdefault(key, default_value)
Parameters: It takes two parameters: 
key – Key to be searched in the dictionary. 
default_value (optional) – Key with a value default_value is inserted to the dictionary if key is not in the dictionary. 
If not provided, the default_value will be None.
Returns: 
Value of the key if it is in the dictionary. 
None if key is not in the dictionary and default_value is not specified. 
default_value if key is not in the dictionary and default_value is specified.


# Python program to show working
# of setdefault() method in Dictionary

# Dictionary with single item
Dictionary1 = { 'A': 'Geeks', 'B': 'For', 'C': 'Geeks'}

# using setdefault() method
Third_value = Dictionary1.setdefault('C')
print("Dictionary:", Dictionary1)
print("Third_value:", Third_value)


Output: 
 
Dictionary: {'A': 'Geeks', 'C': 'Geeks', 'B': 'For'}
Third_value: Geeks


When key is not in the dictionary.

# Python program to show working
# of setdefault() method in Dictionary

# Dictionary with single item
Dictionary1 = { 'A': 'Geeks', 'B': 'For'}

# using setdefault() method
# when key is not in the Dictionary
Third_value = Dictionary1.setdefault('C')
print("Dictionary:", Dictionary1)
print("Third_value:", Third_value)

# using setdefault() method
# when key is not in the Dictionary
# but default value is provided
Fourth_value = Dictionary1.setdefault('D', 'Geeks')
print("Dictionary:", Dictionary1)
print("Fourth_value:", Fourth_value)


Output: 
 
Dictionary: {'A': 'Geeks', 'B': 'For', 'C': None}
Third_value: None
Dictionary: {'A': 'Geeks', 'B': 'For', 'C': None, 'D': 'Geeks'}
Fourth_value: Geeks



Python Dictionary update() method

Python Dictionary update() method updates the dictionary with the elements from another dictionary object or from an iterable of key/value pairs.

Syntax: dict.update([other])

Parameters: This method takes either a dictionary or an iterable object of key/value pairs (generally tuples) as parameters.

Returns: It doesn’t return any value but updates the Dictionary with elements from a dictionary object or an iterable object of key/value pairs.


Update with another Dictionary

# Python program to show working
# of update() method in Dictionary

# Dictionary with three items
Dictionary1 = {'A': 'Geeks', 'B': 'For', }
Dictionary2 = {'B': 'Geeks'}

# Dictionary before Updation
print("Original Dictionary:")
print(Dictionary1)

# update the value of key 'B'
Dictionary1.update(Dictionary2)
print("Dictionary after updation:")
print(Dictionary1)


Output: 

Original Dictionary:
{'A': 'Geeks', 'B': 'For'}

Dictionary after updation:
{'A': 'Geeks', 'B': 'Geeks'}


Update with an iterable


# Python program to show working
# of update() method in Dictionary

# Dictionary with single item
Dictionary1 = {'A': 'Geeks'}

# Dictionary before Updation
print("Original Dictionary:")
print(Dictionary1)

# update the Dictionary with iterable
Dictionary1.update(B='For', C='Geeks')
print("Dictionary after updation:")
print(Dictionary1)


Output: 

Original Dictionary:
{'A': 'Geeks'}

Dictionary after updation:
{'C': 'Geeks', 'B': 'For', 'A': 'Geeks'}


Python dictionary update value if the key exists


def checkKey(dict, key):
	
	if key in dict.keys():
		print("Key exist, ", end =" ")
		dict.update({'m':600})
		print("value updated =", 600)
	else:
		print("Not Exist")
dict = {'m': 700, 'n':100, 't':500}

key = 'm'
checkKey(dict, key)
print(dict)

Output:

Key exist,  value updated = 600
{'m': 600, 'n': 100, 't': 500}



Python dictionary | values()


values() is an inbuilt method in Python programming language that returns a view object. 
The view object contains the values of the dictionary, as a list. 
If you use the type() method on the return value, you get “dict_values object”. It must be cast to obtain the actual list.

Syntax:

dictionary_name.values()
Parameters:
There are no parameters

Returns:

returns a list of all the values available in a given dictionary.
the values have been stored in a reversed manner.


# Python3 program for illustration
# of values() method of dictionary


# numerical values
dictionary = {"raj": 2, "striver": 3, "vikram": 4}
print(dictionary.values())


# string values
dictionary = {"geeks": "5", "for": "3", "Geeks": "5"}
print(dictionary.values())


Output:

dict_values([2, 3, 4])
dict_values(['5', '3', '5'])


Given name and salary, return the total salary of all employees.


# Python3 program for illustration
# of values() method in finding total salary


# stores name and corresponding salaries
salary = {"raj" : 50000, "striver" : 60000, "vikram" : 5000}

# stores the salaries only
list1 = salary.values()
print(sum(list1)) # prints the sum of all salaries


Output:

115000